<#+
 


public enum ColumnInfo
{
	AllowDBNull = 0,
	BaseCatalogName =  1,
	BaseColumnName = 2,
	BaseSchemaName = 3,
	BaseTableName = 4,
	ColumnName = 5,
	ColumnOrdinal = 6,
	ColumnSize = 7,
	DataType = 8,
	IsUnique = 9,
	IsKey = 10,
	IsAliased = 11,
	IsExpression = 12,
	IsIdentity = 13,
	IsAutoIncrement = 14,
	IsRowVersion = 15,
	IsHidden = 16,
	IsLong = 17,
	IsReadOnly = 18,
	NumericPrecision = 19,
	NumericScale = 20,
	ProviderSpecificDataType = 21,
	ProviderType = 22 
}

#>

<#+ 
IEnumerable<string> GetColumnDetails()  
{ 

            NpgsqlConnection conn = new NpgsqlConnection("Server=localhost;Port=5432;User Id=postgres;Password=Houses22;Database=d2d;");
            conn.Open();

            // Define a query
            NpgsqlCommand command = new NpgsqlCommand("SELECT * FROM users", conn);

             
            using (var reader = command.ExecuteReader(CommandBehavior.SchemaOnly))
            {
			 DataTable schemaTable = reader.GetSchemaTable();

                foreach (DataRow row in schemaTable.Rows)
                {

                    foreach (DataColumn col in schemaTable.Columns)
                    yield return col.ColumnName as string; ;
 
                }

		} 
} 
 
 


IEnumerable<DataRow> GetColumnRow(string tableName  )  
{ 

            NpgsqlConnection conn = new NpgsqlConnection("Server=localhost;Port=5432;User Id=postgres;Password=Houses22;Database=d2d;");
            conn.Open();

            // Define a query
            NpgsqlCommand command = new NpgsqlCommand("SELECT * FROM " + tableName, conn);

             
            using (var reader = command.ExecuteReader(CommandBehavior.SchemaOnly))
            {
			 DataTable schemaTable = reader.GetSchemaTable();

                foreach (DataRow row in schemaTable.Rows)
                {

					yield return row as DataRow; ;
                    //foreach (DataColumn col in schemaTable.Columns)
                    //yield return row as DataRow; ;
 
                }

		} 
		 conn.Close();
} 

public bool allowFields(string columnName,bool includeTenant, bool includeId, bool includeBy ,bool includeAt )  
{
  if (
      (columnName == "password_hash") ||
      (columnName == "salt")  ||
	  ((columnName == "tenantId") && (includeTenant == false)) ||
	  ((columnName == "updatedBy") && (includeBy == false)) ||
	  ((columnName == "createdBy") && (includeBy == false)) ||
	  ((columnName == "updatedAt") && (includeAt == false)) ||
	  ((columnName == "createdAt") && (includeAt == false)) ||
	  ((columnName == "id") && (includeId == false))  )
  {
    return false;
  }
	return true;
}
 
public bool allowType(string whatType,string columnName,string columnType,bool includeTenant, bool includeId, bool includeBy, bool includeAt  )  
{
   if (whatType == columnType)   
   {
	 if (((columnName == "tenantId") && (includeTenant == false)) ||
	    ((columnName == "updatedBy") && (includeBy == false)) ||
	    ((columnName == "createdBy") && (includeBy == false)) ||
	    ((columnName == "updatedAt") && (includeAt == false)) ||
	    ((columnName == "createdAt") && (includeAt == false)) ||
	    ((columnName == "id") && (includeId == true))  ) {
	       return false;
	    } else {
		return true;
	  }
   }  
 
   return false;
  
}							

public bool getIDfields(string columnName,bool includeTenant, bool includeId    )  
{
   if (getLastChars(columnName,2) == "Id")   
   {
	 if (((columnName == "tenantId") && (includeTenant == false)) ||
	    ((columnName == "id") && (includeId == false))  ) {
	       return false;
	    } else {
		return true;
	  }
   }  
 
   return false;
  
}	
 
public bool getIDfieldsForInclude(string columnName,bool includeTenant, bool includeId    )  
{
   if (getLastChars(columnName,2) == "Id")   
   {
	 if (((columnName == "tenantId") && (includeTenant == false)) ||
	    ((columnName == "roleId") || (columnName == "parentListId")) ||
	    ((columnName == "id") && (includeId == false))  ) {
	       return false;
	    } else {
		return true;
	  }
   }  
 
   return false;
  
}	 
public string getLastChars( string source,  int tail_length) 
{
    {
       if(tail_length >= source.Length)
          return source;
       return source.Substring(source.Length - tail_length);
    }
}
 
public string firstUpper(string str)
{
    if (String.IsNullOrEmpty(str)) return str;
    if (str.Length == 1) return str.ToUpper();
    return str.Remove(1).ToUpper() + str.Substring(1);
}

public string removeId(string str)
{
    return str.Remove(str.Length - 2);
}

public string getCsharpType(string str)
{
    if ( str == "System.Int32") return "number";
    if ( str == "System.String") return "string";
    if ( str == "System.Boolean") return "boolean";
    if ( str == "System.DateTime") return "Date";
 
	return str;
}
 
public string getCopyright()
{


	var copyRight = "";
    copyRight = "Copyright 2016 Olympus Consultancy Limited - All Rights Reserved "; 
    copyRight =  copyRight + Environment.NewLine + " " + "You may NOT use, copy, distribute or modify this code unless you have written " ; 
    copyRight =  copyRight + Environment.NewLine + " " + "consent from the author which may be obtained from emailing dave@ocl.ie " ; 
	return copyRight;
}

#>