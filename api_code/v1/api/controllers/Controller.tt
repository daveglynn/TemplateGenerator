<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
  <#@ assembly name="Microsoft.SqlServer.ConnectionInfo" 
#>  <#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" 
#>  <#@ assembly name="System.Data" 
#>  <#@ assembly name="..\packages\Npgsql.3.1.7\lib\net451\Npgsql.dll"
#>  <#@ include file="..\..\..\..\shared\helper.ttinclude" 
#>  <#@ import namespace="Npgsql" 
#>  <#@ import namespace="System.Data" 
#>  <#@ import namespace="System.Globalization" 
#>  <#@ import namespace="System.Collections.Generic" 
#>  <#@ import namespace="System.IO" 
#>  <#@ output extension="js" #>
<# var _recIncludeCount = 0 ; #>
/******************************************************************************************************
 
 <#=getCopyright()#>

******************************************************************************************************/

/******************************************************************************************************
 controller layer
******************************************************************************************************/
"use strict";
var db = require('../.././db.js');
var _ = require('underscore');
var constants = require('../.././shared/constant.shared');
var helpers = require('../.././shared/helpers.shared');
var common = require('./extensions/common.extension');
var extension = require('./extensions/<#=_singleName#>.extension');
var Sequelize = require('sequelize');
<# if (_singleName == "user")  { #> 
/******************************************************************************************************
 Login 
******************************************************************************************************/
module.exports.login = function(req, res) {
    var body = _.pick(req.body, 'email', 'password');
    var userInstance;

    db.user.authenticate(body).then(function(user) {
        var token = user.generateToken('authentication');
        userInstance = user;
        return db.token.create({
            token: token
        });
    }).then(function(tokenInstance) {
        // could not read header in angular client so I jused used the response to send back the token
        //res.header('Auth', tokenInstance.get('token')).json(userInstance.toPublicJSON());
        res.status(200).json({
            message: 'Signin Successful',
            token: tokenInstance.get('token'),
            user: userInstance.toPublicJSON()
        }) 
    }).catch(function() {
        res.status(400).json({"err": {"name": "authorisation", "message": "Signin UnSuccessful"  }}   );
    });
};

/******************************************************************************************************
 Logout 
******************************************************************************************************/
module.exports.logout = function(req, res) {
    req.token.destroy().then(function() {
        res.status(204).send();
    }).catch(function(err) {
        res.status(500).json(err);
    });
};
<# } #> 
/******************************************************************************************************
 Insert a Record 
******************************************************************************************************/
module.exports.add<#=firstUpper(_singleName)#> = function(req, res) {

    // pick appropiate fields<#if (_tenantRequired == true){#> tenant will be set to default  <# } #> 
    var body = extension.setPost(req, 'C');
               
    db.<#=_singleName#>.create(body).then(function(<#=_singleName#>) {
        res.json(<#=_singleName#>.toPublicJSON())
    }).catch(Sequelize.ValidationError, function(err) {
         res.status(422).send(err.errors);
    }).catch(function(err) {
        res.status(400).json(err);
    });
};

/******************************************************************************************************
 Get All Records 
******************************************************************************************************/
module.exports.get<#=firstUpper(_pluralName)#>All = function(req, res) {

    // builds clause 
    var where = {};
    where = common.setClauseAll(req, where);
    where = extension.setClauseQuery(req.query, where);
	where = common.setClauseActive(req, where);
	<#if (_codetable == true){#>where = common.setClauseExpired(req.query, where);<# } #> 
	<#if (_tenantRequired == true){#>where = common.setClauseTenantId(req, where);<# } #> 
    var attributes = common.excludeAttributes();

    var order = extension.setClauseOrder(req); 	

	<# _recIncludeCount = 0 ; var RuleBookList = "";#>
 	<# foreach(DataRow row2 in GetColumnRow(_singleName)) 
	{ 
	var BaseColumnName2 = row2[(int)ColumnInfo.BaseColumnName].ToString();
	if(getIDfieldsForInclude(BaseColumnName2,false,false)){#>
	<#if(BaseColumnName2 != "someFieldName" ){#>
	<#var attributesList = "'id','name'"; #><#if(removeId(BaseColumnName2) == "user" ){ attributesList = userAttributesList; RuleBookList = ruleBookFields;}#>
	<#if(removeId(BaseColumnName2) == "ruleBook" ){ attributesList = ruleBookAttributesList; RuleBookList = "";}#>
	<#if(isCodeTableField(BaseColumnName2) == true){ attributesList = codeTableAttributesList;RuleBookList = ruleBookFields;}#>
	<#if(_recIncludeCount == 0 ){#>

	var include = [{ model: db.<#=removeId(BaseColumnName2)#>,attributes: [<#=attributesList#>]<#if(RuleBookList != "" ){#>,<#}#><#=RuleBookList#>}<#}#>
<#if(_recIncludeCount > 0 ) {#>
				   
				   ,{model: db.<#=removeId(BaseColumnName2)#>,attributes: [<#=attributesList#>]<#if(RuleBookList != "" ){#>,<#}#><#=RuleBookList#>}  <#}#>
<#_recIncludeCount++;#> <#}}#><#}#><#if(_recIncludeCount > 0 ) {#>]; 	
<#}#>	
    db.<#=_singleName#>.findAll({
        attributes: attributes,
        where: where ,
		order: [order]<#if(_recIncludeCount > 0 ) {#>,
		include: include <#}#>	
    }).then(function(<#=_pluralName#>) {
        res.json(<#=_pluralName#>);
    }, function(err) {
        res.status(500).json(err);
    })
};

/******************************************************************************************************
 Get a Record by Id
******************************************************************************************************/
module.exports.get<#=firstUpper(_singleName)#>ById = function(req, res) {

    // builds clause
    var where = {};
    where = common.setClauseId(req, where);
	where = common.setClauseActive(req, where);
	<#if (_codetable == true){#>where = common.setClauseExpired(req.query, where);<# } #> 
	<#if (_tenantRequired == true){#>where = common.setClauseTenantId(req, where);<# } #> 
    var attributes = common.excludeAttributes();

	<# _recIncludeCount = 0 ;   RuleBookList = "";#>
 	<# foreach(DataRow row2 in GetColumnRow(_singleName)) 
	{ 
	var BaseColumnName2 = row2[(int)ColumnInfo.BaseColumnName].ToString();
	if(getIDfieldsForInclude(BaseColumnName2,false,false)){#>
	<#if(BaseColumnName2 != "someFieldName" ){#>
	<#var attributesList = "'id','name'"; #><#if(removeId(BaseColumnName2) == "user" ){ attributesList = userAttributesList; RuleBookList = ruleBookFields;}#>
	<#if(removeId(BaseColumnName2) == "ruleBook" ){ attributesList = ruleBookAttributesList; RuleBookList = "";}#>
	<#if(isCodeTableField(BaseColumnName2) == true){ attributesList = codeTableAttributesList;RuleBookList = ruleBookFields;}#>
	<#if(_recIncludeCount == 0 ){#>

	var include = [{ model: db.<#=removeId(BaseColumnName2)#>,attributes: [<#=attributesList#>]<#if(RuleBookList != "" ){#>,<#}#><#=RuleBookList#>}<#}#>
<#if(_recIncludeCount > 0 ) {#>

				   ,{model: db.<#=removeId(BaseColumnName2)#>,attributes: [<#=attributesList#>]<#if(RuleBookList != "" ){#>,<#}#><#=RuleBookList#>}  <#}#>
<#_recIncludeCount++;#> <#}}#><#}#><#if(_recIncludeCount > 0 ) {#>]; 	
<#}#>	
    //find and return the records 
    db.<#=_singleName#>.findOne({
        attributes: attributes,
        where: where <#if(_recIncludeCount > 0 ) {#>,
		include: include <#}#>	
    }).then(function(<#=_singleName#>) {
        if (!!<#=_singleName#>) {
            res.json(<#=_singleName#>.toPublicJSON());
        } else {
            res.status(404).json({"err": {"name": "<#=_singleName#>", "message": "An error occurred retrieving the record"  }});
        }
    }, function(err) {
        res.status(500).json(err);
    })
};

/******************************************************************************************************
 Update a Record 
******************************************************************************************************/
module.exports.update<#=firstUpper(_singleName)#> = function(req, res) {

    // pick appropiate fields 
    var body = extension.setPost(req, 'U');

    // set the attributes to update
    var attributes = extension.prepareForUpdate(body);

    // builds clause
    var where = {};
    where = common.setClauseId(req, where);
    <#if (_tenantRequired == true){#>where = common.setClauseTenantId(req, where);<#}#>


    // find record on database, update record and return to client
    db.<#=_singleName#>.findOne({
        where: where
    }).then(function(<#=_singleName#>) {
        if (<#=_singleName#>) {
            <#=_singleName#>.update(attributes).then(function(<#=_singleName#>) {
                res.json(<#=_singleName#>.toPublicJSON());
            }, function(err) {
                res.status(400).json(err);
            });
        } else {
             res.status(404).json({"err": {"name": "<#=_singleName#>", "message": "An error occurred retrieving the record"}});
        }
    }, function(err) {
        res.status(500).json(err);
    });
};

/******************************************************************************************************
 Delete a Record 
******************************************************************************************************/
module.exports.delete<#=firstUpper(_singleName)#> = function(req, res) {

    // builds clause
    var where = {};
    where = common.setClauseId(req, where);
    <#if (_tenantRequired == true){#>where = common.setClauseTenantId(req, where);<#}#>


    // delete record on database
    db.<#=_singleName#>.destroy({
        where: where
    }).then(function(rowsDeleted) {
        if (rowsDeleted === 0) {
            res.status(404).json({ "err": { "name": "<#=_singleName#>", "message": "An error occurred retrieving the record"}});
        } else {
            res.status(204).send();
        }
    }, function(err) {
        res.status(500).json(err);
    });
};
  	<# foreach(DataRow row in GetColumnRow(_singleName)) 
	{ var BaseColumnName = row[(int)ColumnInfo.BaseColumnName].ToString();
	if(getIDfields(BaseColumnName,false,false)){#>

/******************************************************************************************************
 Get <#=firstUpper(_singleName)#> records by <#=firstUpper(BaseColumnName)#> 
******************************************************************************************************/
module.exports.get<#=firstUpper(_pluralName)#>By<#=firstUpper(BaseColumnName)#> = function (req, res) {

    // builds clause
    var where = {};
    where = extension.setClause<#=firstUpper(BaseColumnName)#>(req, where);
	where = common.setClauseActive(req, where);
	<#if (_codetable == true){#>where = common.setClauseExpired(req.query, where);<# } #> 

    <#if (_tenantRequired == true){#>where = common.setClauseTenantId(req, where);<#}#>


    var attributes = common.excludeAttributes();

	var order = extension.setClauseOrder(req); 	

	<# _recIncludeCount = 0 ;   RuleBookList = "";#>
 	<# foreach(DataRow row2 in GetColumnRow(_singleName)) 
	{ 
	var BaseColumnName2 = row2[(int)ColumnInfo.BaseColumnName].ToString();
	if(getIDfieldsForInclude(BaseColumnName2,false,false)){#>
	<#if(BaseColumnName2 != "someFieldName" ){#>
	<#var attributesList = "'id','name'"; #><#if(removeId(BaseColumnName2) == "user" ){ attributesList = userAttributesList; RuleBookList = ruleBookFields;}#>
	<#if(removeId(BaseColumnName2) == "ruleBook" ){ attributesList = ruleBookAttributesList; RuleBookList = "";}#>
	<#if(isCodeTableField(BaseColumnName2) == true){ attributesList = codeTableAttributesList;RuleBookList = ruleBookFields;}#>
	<#if(_recIncludeCount == 0 ){#>

	var include = [{ model: db.<#=removeId(BaseColumnName2)#>,attributes: [<#=attributesList#>]<#if(RuleBookList != "" ){#>,<#}#><#=RuleBookList#>}<#}#>
<#if(_recIncludeCount > 0 ) {#>

				   ,{model: db.<#=removeId(BaseColumnName2)#>,attributes: [<#=attributesList#>]<#if(RuleBookList != "" ){#>,<#}#><#=RuleBookList#>}  <#}#>
<#_recIncludeCount++;#> <#}}#><#}#><#if(_recIncludeCount > 0 ) {#>]; 	
<#}#>	
    //find and return the records 
    db.<#=_singleName#>.findAll({
        attributes: attributes,
        where: where,
		order: [order]<#if(_recIncludeCount > 0 ) {#>,
		include: include <#}#>	
    }).then(function (<#=_pluralName#>) {
        res.json(<#=_pluralName#>);
    }, function (err) {
        res.status(500).json(err);
    });
};
<#}}#>

<#if (_codetable == true){#>
/******************************************************************************************************
 Get a Record for Dropdown
******************************************************************************************************/
module.exports.get<#=firstUpper(_pluralName)#>Dropdown = function (req, res) {

    // builds clause
    var where = {};
    where = common.setClauseActive(req, where);
    where = common.setClauseExpired(req.query, where);
	<#if (_tenantRequired == true){#>where = common.setClauseTenantId(req, where);<# } #> 
	<#if (_singleName == "item"){#>
where = extension.setClauseListId(req, where);
	<# } #> 
    var order = extension.setClauseOrder(req); 	
	
	//find and return the records 
    db.<#=_singleName#>.findAll({
        attributes: ['id', 'parentListId', 'name', 'code', 'ruleBookId'],
        where: where,
        order: [order]
    }).then(function (<#=_pluralName#>) {
        if (!!<#=_pluralName#>) {
            res.json(<#=_pluralName#>);
        } else {
            res.status(404).json({ "err": { "name": "<#=_singleName#>", "message": "An error occurred retrieving the record" } });
        }
    }, function (err) {
        res.status(500).json(err);
    })
};

/******************************************************************************************************
 Get a Record for Dropdown By Id
******************************************************************************************************/
module.exports.get<#=firstUpper(_pluralName)#>DropdownById = function (req, res) {

    // builds clause
    var where = {};
    where = common.setClauseActive(req, where);
    where = common.setClauseExpired(req.query, where);
	<#if (_tenantRequired == true){#>where = common.setClauseTenantId(req, where);<# } #> 
	<#if (_singleName == "item"){#>
where = extension.setClauseListId(req, where);
	<# } #> 
    var order = extension.setClauseOrder(req); 	
    var include = [{ model: db.ruleBook, attributes: [<#=ruleBookAttributesList#>]}]; 	
	
	//find and return the records 
    db.<#=_singleName#>.findAll({
        attributes: ['id', 'parentListId', 'name', 'code', 'ruleBookId'],
        where: where,
        order: [order],
        include: include 
    }).then(function (<#=_pluralName#>) {
        if (!!<#=_pluralName#>) {
            res.json(<#=_pluralName#>);
        } else {
            res.status(404).json({ "err": { "name": "<#=_singleName#>", "message": "An error occurred retrieving the record" } });
        }
    }, function (err) {
        res.status(500).json(err);
    })
};	
<# } #> 

<# var _nongenerated = ""; #>
<# if ((_singleName == "item"))  { 
    string path = System.IO.Directory.GetParent(Environment.CurrentDirectory).FullName.Replace("\\bin","") +"\\api_code\\v1\\api\\controllers\\nongenerated\\"+ _singleName +".controller.js";
     if (File.Exists(path)) {
	  _nongenerated = File.ReadAllText(path); 
	 }
 	}
#>
<#=_nongenerated#>